// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApi.DataEF.Infrastructure;

namespace MusicApi.DataEF.Migrations
{
    [DbContext(typeof(DataEfContext))]
    partial class MusicDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("MusicApi.Data.Entities.DataAlbum", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataArtistArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Licence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId");

                    b.HasIndex("DataArtistArtistId");

                    b.ToTable("DataAlbum");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataAlbumRating", b =>
                {
                    b.Property<int>("AlbumRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataEfAlbumAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlbumRatingId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("DataEfAlbumAlbumId");

                    b.HasIndex("RatingId");

                    b.ToTable("AlbumRatings");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataArtist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataEfAlbum", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Licence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataEfSong", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Popularity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("SongId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataAlbumAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataSongSongId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("RatingId");

                    b.HasIndex("DataAlbumAlbumId");

                    b.HasIndex("DataSongSongId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataSong", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DataEfAlbumAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Popularity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("SongId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("DataEfAlbumAlbumId");

                    b.ToTable("DataSong");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataSongRating", b =>
                {
                    b.Property<int>("SongRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataEfSongSongId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongRatingId");

                    b.HasIndex("DataEfSongSongId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SongId");

                    b.ToTable("SongRatings");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataAlbum", b =>
                {
                    b.HasOne("MusicApi.Data.Entities.DataArtist", null)
                        .WithMany("Albums")
                        .HasForeignKey("DataArtistArtistId");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataAlbumRating", b =>
                {
                    b.HasOne("MusicApi.Data.Entities.DataAlbum", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApi.Data.Entities.DataEfAlbum", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DataEfAlbumAlbumId");

                    b.HasOne("MusicApi.Data.Entities.DataRating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataRating", b =>
                {
                    b.HasOne("MusicApi.Data.Entities.DataAlbum", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DataAlbumAlbumId");

                    b.HasOne("MusicApi.Data.Entities.DataSong", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DataSongSongId");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataSong", b =>
                {
                    b.HasOne("MusicApi.Data.Entities.DataAlbum", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusicApi.Data.Entities.DataEfAlbum", null)
                        .WithMany("Songs")
                        .HasForeignKey("DataEfAlbumAlbumId");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataSongRating", b =>
                {
                    b.HasOne("MusicApi.Data.Entities.DataEfSong", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DataEfSongSongId");

                    b.HasOne("MusicApi.Data.Entities.DataRating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApi.Data.Entities.DataSong", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataAlbum", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataArtist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataEfAlbum", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataEfSong", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MusicApi.Data.Entities.DataSong", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
